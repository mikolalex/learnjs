### Вивчи Javascript - заради добра, заради України!

@@@
Javascript - це приємна і красива мова програмування, яка стає дедалі більш популярною по всьому світу.
Якщо ви ніколи не займались програмуванням, то Javascript цілком підійде в якості першої мови.
В Україні для вивчення Javascript є ще кілька вагомих підстав: ставши успішним JS-програмістом, ви не тільки покращите свій фінансовий стан, отримаєте цікаву роботу, а і 
допоможете нашій державі! Працюючи з іноземними замовниками, ви зміцнюєте нашу валюту, піднімаєте ВВП, покращуєте міжнародний імідж України!
Отже, перефразовуючи Ільфа і Петрова, "Старанно вивчаючи джаваскрипт, ти допомагаєш суспільству!" (і собі :)

Цей підручник написаний в першу чергу для людей, які не мали раніше досвіду програмування, але знайомі із HTML. Я постарався максимально детально описати базові 
поняття джаваскрипта, так щоб це було зрозуміло всім. Адже, якщо ви ніколи не мали справи з програмуванням, то навіть будь ви суперрозумник із височенним IQ, все одно багато моментів для вас будуть незрозумілими.
Якщо ж ви, читаючи цей підручник, відчуватимете, що автор розсусолює, занадто детально поясню елементарні речі - що ж, вітаю, можете потішитись, ви розумна людина і ваш мозок сприймає все нове швидше, аніж у інших людей!

У підручнику я стараюсь пояснювати теорію і одразу підкріплювати її практикою. Але мушу попередити усіх, хто рветься одразу в бій: перші ніж ви зможете робити більш-менш серйозні практичні завдання, вам треба буде виконати багато 
примітивних, "штучних" прикладів. 
Так що запасіться терпінням, і будьте готові вирішувати задачі типу "У Петрика 2 шоколадки, а у Марійки одна, скільки у них шоколадок разом?", тільки в контексті програмування.
Якщо ви, наприклад, власник інтернет-магазину, і хочете навчитись, як доробити якийсь вордпрес-модуль, щоб він працював, так як вам хочеться - вам цей підручник навряд чи допоможе.
Тобто, він вам допоможе, тільки якщо ви ретельно прочитаєте його від початку до кінця, а шукати якихось конкретних рецептів тут не треба.
Підручник розбитий на кілька розділів, які будуть додаватись по мірі написання, кожен розділ містить теорію, приклади коду, завдання.
Також ви можете писати свої коментарі і питання по матеріалу, а автор і інші користувачі зможуть вам відповісти.

Отже, вирушаємо!
<div style="margin-top:100px;"></div>
<img src="vt.jpg">
@@@
@@@
##Зміст



<ul id="zmist">
</ul>

@@@
@@@
##Що таке Javascript і чим він пахне


Я не буду тут вам переказувати історію винекнення Javascripta, у цьому нема сенсу, перейдемо до суті.
З самого початку Javascript задумувався як мова, як допоможе зробити веб-сторінки інтерактивними.
(нагадую, що читання цього підручника має сенс тільки для тих, хто більш-менш знайомий з основами HTML).
Але як це часто буває з веб-технологіями, автори задумували одне, а вийшло щось інше. Javascript давно переріс рамки "мови простеньких скриптиків",
на ньому тепер пишуться дуже великі і складні програми, апплікейшни, ну от хоча б Gmail(можливо, він вам не здається складним, але повірте - досить і досить серйозний застосунок).
За допомогою джаваскрипта простенькі ХТМЛ сторінки по типу "Це моя домашня сторінка, ось моє фото, а ось мій кіт" переросли у серйозні інтерактивні застосунки.
Однак джаваскрипт виявився настільки кльовою мовою, що її, трошки підлампичивши, адаптували і для зовсім інших задач, не пов"язаних з вебом(NodeJS, який працює на сервері, і інші технології).
Так що, повторюсь, якщо ви ще сумніваєтесь - джаваскрипт це дуже цікава технологія, яка застосовується у багатьох різноманітних сферах, але перш за все - у вебі, і її, без сумніву, варто вивчати.

У нашому підручнику ми сконцентруємось на традиційній формі джаваскрипта. Мова іде про джаваскрипт у браузері, де його задача - маніпулювати ХТМЛ сторінкою.
У цій сфері джаваскрипт є повним монополістом. Річ у тім, що кожна мова програмування потребує програму, яка б її інтерпретувала.
Наприклад, ХТМЛ - це просто набір символів, текст, і тільки у браузері він перетворюється на барвисту веб-сторінку. Чому? Бо кожен браузер "вміє" інтерпретовувати ХТМЛ, себто, робити із гів... із текста картинку.
Так ось, єдиною мовою програмування, яку також можуть інтерпретовувати усі браузери, є Джаваскрипт. Так склалось.
Це значить, якщо ви хочете додати інтерактивності свої веб-сторінці, ви можете зробити це тільки із допомогою джаваскрипта.

Отже, які задачі вирішує джаваскрипт? Ви знайомі із ХТМЛ, який теж, в принципі, є мовою програмування. Однак, який би прекрасний не був ХТМЛ і його супутник ЦСС, вони обмежені у своїх можливостях - вони статичні.
Припустимо, ви верстаєте меню, і хочете, щоб кожна його кнопка при наведенні змінювала колір. Без проблем, за допомогою CSS :hover ви можете це зробити.
А як зробити, щоб ця кнопка змінила свій колір ЛИШЕ ОДИН РАЗ? На жаль, ХТМЛу і ЦССу ця задача не до снаги.
Натомість, це може зробити джаваскрипт. Як це робиться - пояснюю "на пальцях".
У джаваскрипті ми можемо писати "хендлери" - це певні набори дій, які відбуваються у разі, якщо юзер зробить певну дію.
Наприклад, "якщо юзер клікнув по кнопці... сховати її". У нашому випадку, нам треба, щоб коли юзер кліка по кнопці, 
ми перевіряли: чи клікав він по ній до цього. Якщо вже клікав хоча б раз, то нічого не робимо. Якщо ще не клікав, то змінити колір.
Наш уявний код виглядав би так:
```
КОЛИ юзер клікає по кнопці
	1. Подивитись, чи не клікав він по ній до цього
	2. Якщо ще ні разу не клікав, змінити її колір
	3. Якщо вже клікав, не робити нічого
```
Для порівняння, ось код на справжньому джаваскрипті, який реалізовує цю задачу:
```


var button_clicked = false;
$("button").click(function(){
	if(!button_clicked){
		$(this).css('color', 'red');
		button_clicked = true;
	} 
	else {
		// do nothing!
	}
})
```

Страшно? Сподіваюсь, що ні, а якщо і так, то не бійтеся, ми дуже скоро розберемо цей код і він вам здасться очевидним і простим, не страшніше ніж строчка "ИТОГО" в інвентарній книзі(в дитинстві, коли я не знав значення цього слова, воно мене лякало своєю неминучістю і загадкосвістю).

Отже, ще раз з"ясуємо основні моменти. Джаваскрипт - це аж ніяк не конкурент ХТМЛу і ЦССу, а скоріше доповнення. Він має зовсім відмінний від них принцип дії.
В той час, як ЦСС і ХТМЛ є декларативними мовами, в яких ми пишемо "ЩО МИ ХОТІЛИ Б БАЧИТИ"(дів там або ул), то джаваскрипт є імперативною мовою, в якій ми пишемо, "ЩО І ЯК РОБИТИ".

Джаваскрипт можна вставити на сторінку дуже просто - за допомогою тега &ltscript&gt;
```
<div class="something"></div>
<script>
	document.getElementsByClassName('something')[0].innerHTML = 'Hello, world!';
</script>
```

Ось так виглядає шматочок джс-тексту, вбудованого у ХТМЛ сторінку. 
Все, що лежить усередині тегу script, не буде показане на сторінці, натомість, воно буде ВИКОНАНЕ браузером.
В даному випадку, цей код означає таке: "пошукати на сторінці теги із класом "something", вибрати перший з них, і всередину нього запхати текст "Hello, world!"
Кожного разу, при завантаженні сторінки, цей код буде виконаний один раз.
Для виконання наших завдань ви можете узяти будь-яку ХТМЛ сторінку, вставити туди тег script, і писати у ньому код. Після кожної можифікації коду потрібно заново відкрити сторінку(оновити її).
@@@
@@@
## Початок знайомства з Javascript. Змінні



Увесь Джаваскрипт, по суті, складається з двох речей: із змінних і функцій. Змінні зберігають у собі дані, а функції їх обробляють, модифіковують і щось роблять.
Все, більше нічого у джаваскрипті нема. Для початку розберемось із змінними.
```
var name = 'John'; // я змінна!
var surname = 'Petrenko';
var age = 42;
```
name, surname, age - це змінні!
У першої змінної |ім"я| - name, а |значення| - John.
У перших двох змінних значення - це слова, а у третьої змінної - число.
Ось які важливі правила ви можете дізнатись із цього прикладу:<ul>
	<li>
		кожна дія в джаваскрипт пишеться з нової строчки
	</li>
	<li>
		після кожної дії ми повинні ставити крапку з комою(але є винятки)
	</li>
	<li>
		коли ми вперше використовуємо змінну, ми повинні писати ключове слово |var|(від англійського |variable| - змінна)
	</li>
	<li>
		Якщо ми хочемо записати у змінну слово або кілька слів - ми беремо їх у лапки. Числа у лапки можна не брати.
	</li>
	</ul>
Приклади для запам"ятовування:
	^
var 12_friends_of_ocean = 'movie'; // назва змінної НЕ МОЖЕ починатись із ЦИФРИ!
var i_am_a_c**l_hac|-|er = 'Valyera'; // Не вживайте ніяких спецсимволів у назві змінної! 
//Тільки букви, цифри і нижнє підкреслювання!
var good_intentions = evil; // слова беруться в лапки!
^
var my_current_job_52 = 'JS developer'; // цифри можуть стояти будь-де, тільки не на початку
var my_first_job = 'tractor driver';
var a1 = "42";// ми можемо брати числа у лапки, якщо хочеться
var x2 = 37.5; // а можемо і не брати! Краще НЕ брати
	^





Отже, ми навчились присвоювати змінним значення. Що робити далі?
Найпростіше - це просто вивести значення змінної. При чому, вивести не в документ(роботу із ХТМЛ ми розглянемо пізніше), а просто в консоль.
Консоль необхідна програмісту для відлагоджування програми, в неї можна щось виводити, що не зачепить сам ХТМЛ документ, але допоможе нам зрозуміти, що відбувається у нас в коді.
У вашій панелі відлагоджування відкрийте вкладку "Console", там буде чистий лист. Спробуйте виконати у себе в документі(в тезі script, ви ж пам"ятаєте?) наступний код:

```
var answer = 42;
console.log(answer);
```
Ви побачите, що у вашій консолі вивелось значення змінної "answer" - 42.
В подальшому, якщо я казатиму "подивіться значення змінної", це означатиме - виведіть її в консоль.

```
var a = 42 * 3; // 126
```
Подвійні рисочки означають коментар! Часто ми писатимемо те значення, яке буде у змінної, в коментарі, якщо воно не очевидне.

@@@
@@@
## Операції зі змінними

Отже, поки що ми вміємо присвоювати змінним якесь значення, і виводити його в консоль.
А що ж ми можемо зробити зі змінними більш толкового?
З числами ми можемо робити арифметичні операції:

```
var length = 10;
var height = 3;

var area = length * height;// 30

// Ми можемо множити їх, ділити і віднімати!
var x = length - 20; // -10
// Для комплексних підрахунків, використовуйте дужки, так само, як і в математиці!
var a = ((length - height + 1)/2)*10; // 40
//спочатку віднімемо, потім додамо, потім поділимо, потім помножимо
```

Ок, це добре, а як бути зі словами?

```

var name = 'Ivan';
var surname = 'Kychatyi';

var fullname = name + surname;
```

2 + 12 буде 14, а скільки ж буде Ivan + Kychatui? Правильно, IvanKychatui!
Тобто, змінні, які містять слова, при додаванні - просто "склеюються разом"!
Це дуже зручно і часто використовується, наприклад, при генеруванні ХТМЛу(так, джаваскрипт таким займається!)
У нашому прикладі, щоб повне ім"я виглядало гарно, йому не вистачає якогось префіксу, а також пробілу між іменем і прізвищем.
Спробуємо додати його. Просто потрібно "склеїти" разом змінні і інші "слова".

```

var fullname = 'Mr. ' + name + ' ' + surname; // 'Mr. Ivan Kychatui'
```
Слова у джаваскрипті прийнято називати строчками.
Будь-який набір символів, окрім числа - це строчка.
Наприклад, 'wgfwe98yug8 t345345 124214124' - це строчка, "Peter's pecker picked another pickle bearing pussy pepper" - це теж строчка!
Строчки |обов"язково| беруться в лапки.

Ось ви і зрозуміли, чому потрібно відрізняти числа від слів.
Подивіться наступний ключовий приклад:

```
var Ivan_has_apples = 3;
var Mary_has_apples = 5;
var total_number_of_apples = Ivan_has_apples + Mary_has_apples; // 8

// а якщо ви спробуєте скласти строчки як числа
var Ivan_has_apples = '3';
var Mary_has_apples = '5';
var total_number_of_apples = Ivan_has_apples + Mary_has_apples; // 35!

// яблук насправді дещо менше
```
А все тому, що у другому випадку ви спробували скласти СТРОЧКУ 3 зі СТРОЧКОЮ 5, на що справедливо отримали результат - 35!


Так що поки що запам"ятайте, що змінні бувають двох типів: строчки і числа, і змішувати їх не варто(або робити це обережно)

Як ви помітили, інколи в змінну записується результат роботи над іншою змінною. А чи буде працювати така конструкція?

```

var a = 35;

a = a + 10;
```
Тут є кілька коментів, що можуть викликати ваш подив. 
По-перше, чому я в другій строчці не написав var? Тому що, коли ми згадуємо змінну удруге(і всі подальші рази), писати var не треба!
Добре, а як же ми так беремо... і записуємо в змінну а саму себе? Хіба це можливо?

Звісно, якщо розглядати цей запис з точки зору математики, це нонсенс. Рівняння виду x = x + 1 не має коренів, адже немає такого числа, яке було б рівне самому собі плюс одиниця)
Але це не математика. Цей вираз потрібно читати так:
"Запишіть будь-ласка у змінну "а" її поточне значення, до якого додали десять"
Отже, коли ми у правій частині пишемо якийсь вираз, вираховуєтсья його значення, а потім воно записується у ліву частину!


Ви можете спитати, а що ж відбувається із попереднім значенням? Відповідаю: воно зникає.
Ми записуємо "поверх" існуючого значення. Це може здатись дивним з точки зору побуту, т.к., до прикладу, ви не можете налити у банку з водою молока, перш ніж ви не виллєте звідти воду.
Однак у світі інформатики все дещо простіше. Розглянемо такий приклад

```
var my_beloved = 'Oksana';

// багато води утекло з тих пір...
my_beloved = 'Iryna';

// раптово!
```
Час проходить, і деякі речі змінюються. Звісно, реальна Оксана нікуди не ділася, просто місце у вашій душі, яке було зайняте нею, тепер займає інша дівчина.
Так і зі змінними: нове значення заміщує старе, і старе просто припиняє існувати, що, однак, не значить, що об"єкт, який воно означало, теж зник.

Одне дуже важливе правило: змінні можна використовувати тільки |після| того, як ви їх оголосили.

^
// синтаксична помилка, ви не взяли строчку в лапки
var a = Mike;

// ще одна помилка, ви використовуєте різні типи лапок в одній строчці
var b = 'I feel good!";

// 'типова помилка: лапки всередині строчки сприймаються як її завершення!
// Такий запис призведе до помилки! Джаваскрипт подумає, що строчка - це "Hi, what", 
// (ви ж обмежили її одинарними лапками), а далі іде вже... незрозуміло що!
var q = 'Hi, what's going on?';

//'ви пробуєте використати змінну |y| |до| її оголошення! Це призведе до помилки
var x = 10;
var sum = x + y;
var y = 13;

^

// строчки пишуться тільки в лапках!
var a = 'Mike';

// одинарних або подвійних!
var b = "Josh";

// якщо в самій строчці використовуються одинарні лапки, обгорніть її в подвійні, і навпаки!
var q = "Hi, what's going on?";

^



Завдання для засвоєння.
Починаємо ліпити пасочки.

```
var a = 23;
var b = 44;

// Напишіть таку змінну "c", яка була б подвоєною сумою змінних "a" i "b"

???%c == 134%
```
Це пробний приклад. Щоб отримати правильну відповідь, введіть "var c = (a + b)*2;" і натисніть "Перевірити!"

А ось ще завдання

```
var name = 'John';
var surname = 'Doe';

// Створіть змінну fullname, яка б була результатом складення 
// змінної name, пробіла і змінної surname, тобто, 'John Doe'

???%fullname == "John Doe"%var fullname = name + ' ' + surname;%
```
```
// "Загорніть" текст змінної в тег div
var str = "Johnny got his gun"; 

// var wrapped = ???; 

???%wrapped == '<div>Johnny got his gun</div>'%var wrapped = '<div>' + str + '</div>'%

// console.log(wrapped); // <div>Johnny got his gun</div>
```

```
// нехай змінна tag є тегом, в який треба загорнути строчку, а str - сама строчка.
var tag = 'b';

var str = 'Hello, Dolly!';

???%wrapped == '<b>Hello, Dolly!</b>'%var wrapped = '<' + tag + '>' + str + '</' + tag + '>'%

console.log(wrapped); // <b>Hello, Dolly!</b>
```
Вітаю, ви дещо знаєте про змінні! :)

@@@

@@@

## Функції

Це сама сіль джаваскрипта. Якщо змінні потрібні для того, щоб зберігати дані, то функції покликані |щось із ними робити|.
Вони бувають двох типів: стандартні, які входять у базовий джентльменський набір можливостей джаваскрипта, і самописні, які ви створюєте самі для вирішення своїх потреб.

# Стандартні функції

Стандартні функції джаваскрипта дозволяють нам зробити ті речі, які ми самі нізащо не змогли б зробити, використовуючи лише змінні і відомі нам операції над ними.
Наприклад, вивести юзеру в браузер повідомлення про щось. 
```
var user = 'Sasha';
var greeting = 'Hello, Mr. ' + Sasha;

alert(greeting);  // <-ось це функція!

```
Тут alert(...) - це |виклик| функції. Кожна функція може викликатись будь-яку кількість разів, в будь-якому місці.
Те, що знаходиться в дужках - це |аргументи| функції. Функція alert() виводить якесь повідомлення на екран. Але ж ми повинні вказати, яке!
Ось для цього існують аргументи функції. Аргументи - це якісь дані, частіше за все змінні, які ми |передаємо| в функцію при її виклику.
Як бачите, кожна функція має ім"я, по якому її можна викликати.
Для того, щоб викликати функцію, треба написати її ім"я, відкрити дужки, написати там її аргументи, і закрити дужки :)

^
// змінна ololo не існує(ми її не оголосили)
alert(ololo); 

alert(msg);
var msg = 'Hello, long distance runner!';
// теж неправильно, змінна повинна бути оголошена |ДО| того, як її використають(вище)

// ми не передали жодного аргументу, це не є добре)
alert();

^

var ololo = 'Iona';
alert(ololo);

// так теж можна - передавати в якості аргументів строчки!
alert('Hello, Dolly!');

// і навіть комбінувати строчки зі змінними прямо в аргументах функції!
var name = 'Mike';
alert('Hello, ' + name + '!');

^

Однак, є і інший різновид стандартних функцій, які викликаються дещо інакше.

# Методи

```

var a = 'Hello, my name is John!';

var b = a.replace("John", 'Petro'); // 'Hello, my name is Petro!'

```

Такі фунції викликаються якби "від змінної". Ви пишете ім"я змінної, ставите крапку, і далі пишете ту функцію, яку хотіли б до неї застосувати!

```
var a = 'I am A CaMeL';

a = a.toLowerCase();// 'i am a camel'

```

Давайте тепер роздивимось, що це за функції і як з ними поводитись.
Вище були згадані дві функції, replace() і toLowerCase(). Перша функція, як ви здогадались, замінює в строчці задані слова іншими.
Друга функція робить усі букви у строчці - прописними, тобто, у нижньому регістрі.

Ці функції відносяться до групи т.зв. строкових функцій, тобто функцій, які призначені для роботи зі строчками.
Вони викликаються "від змінної", тобто, через крапку після імені змінної.
Функція replace() має два аргументи - перший означає "шо шукати", а другий - "на що замінити знайдені строчки".

Функція toLowerCase() не має аргументів взагалі. Ви можете спитати, а як вона дізнається, з якою строчкою їй працювати?
Справа в тому, що передавати вихідну строчку немає потреби, так як нею є та строчка, "від якої" ми викликаємо функцію.
В даному випадку, змінна "а". У цьому і весь сенс виклику "від змінної": він якби по замовчуванню використовує ту змінну, від якої ми виликаємо.
Такі функції у джаваскрипті називаються |"методами"|(це важливий термін, запам"ятайте його).

^
// безглуздий запис - ми викликаємо функцію, але нікуди не записуємо результат! 
// Змінна str залишиться такою ж
var str = 'Donatas Banionis';
str.replace("s", "");
console.log(str); // 'Donatas Banionis', те саме

^

var str = 'Donatas Banionis';
str = str.replace("s", "");
console.log(str);// 'Donata Banionis'

^ 
Ми замінили літеру "s" на пусту строчку, тобто, фактично - вирізали її. Зверніть увагу, метод replace() замінює лише перше входження шуканої строчки!
Виклик методу не впливає на ту змінну, від якої ми його викликали.
Для того, щоб змінити значення змінної, його треба в неї записати.

```

var fruits = 'bananas, apples, carrots';

// carrots?!
var real_fruits = fruits.replace("carrot", "apricot");

console.log(real_fruits); // 'bananas, apples, apricots'
console.log(fruits); // 'bananas, apples, carrots' - без змін, як і очікувалось!

```



# Самописні функції

Нарешті, ви можете створювати функції самі!
Це відбувається у два етапи: 

а) ви описуєте функцію

б) користуєтесь нею!

При чому, другий етап вам вже відомий - самописними функціями користуються так само, як і стандартними.
А от як описати функцію?
Для цього є певний синтаксис. Коли ви зустрічаєте слово "синтаксис" в цьому підручнику, це означає, що зараз буде приклад, в якому треба звертати увагу
на найменші дрібниці і нюанси, і свято дотримуватись їх, інакше вам код не запрацює.
Вам вже відомий синтаксис оголошення змінних(слово var), синтаксис операцій(знак дорівнює і крапка з комою в кінці), і ви вже знаєте, як викликати функції(написати ім"я функції і в дужках аргументи).

Тепер ви повинні запам"ятати синтаксис |оголошення| функції.

```

var get_square = function(num){
	return num * num;
}

// функція get_square буде повертати квадрат числа, тобто, число, помножене само на себе
var a = 3;
var b = get_square(a); // 9

// ще приклад
// функція повертає строчку, загорнуту в заданий тег.
var wrap_in_tag = function(str, tagname){
	var wrapped = '<' + tagname + '>' + str + '</' + tagname + '>';
	return wrapped;
}

var a = 'span';
var g = 'Hello, I love you, could you tell me your name';

var html = wrap_in_tag(g, a);

html; // <span>Hello, I love you, could you tell me your name</span>

```

Тут уже є багато над чим помедитувати.
Для початку, розберемось із синтаксисом, тобто, як треба правильно розставляти фігурні дужки і коми, щоб у вас усе працювало.

По-перше, зверніть увагу, що оголошення функції подібне до створення змінної - ліва частина у них однакова.
Ми пишемо ключове слово "var" і назву функції, яку ми хотіли б їй дати. А ось права частина специфічна.
Ми пишемо ключове слово function, потім відкриваємо дужки, перераховуємо список аргументів, закриваємо дужки, відкриваємо фігурні дужки, пишемо |тіло функції|, і закриваємо дужки.
Ми можемо не написати жодного аргументу, тіло може бути пустим, але ключове слово function, дужки і фігурні дужки ви зобов"язані написати!

```
var stupid = function(){}; // це цілком правильний запис! 
// Щоправда, толку від такої функції небагато

```

Але як це працює? Чому ми у функції wrap_in_tag назвали аргументи str i tagname, а передали туди змінні g i a, як це працює?
Ось ще один приклад для медитації.

```
var he = 'John';
var she = 'Mary';

var merry = function(bride, groom){
	return 'Congratulations, ' + groom + ' and ' + bride + ', you are married!';
}

var happy_message = merry(she, he);

```

В реальному житті функції можна порівняти із обрядами, церемоніями, взагалі, будь-якими процесами.
Як би ви описали інопланетянину, що таке весілля і як воно відбувається?
По-перше, визначимось із мінімальними вимогами. Для весілля потрібно щонайменше двоє людей, наречений і наречена(по можливості, різної статі).
Звичайно, там може бути присутнім багато людей, але справді значущі зміни відбуваються, перш за все, саме у житті цих двох людей.
Отже, нам потрібні двоє. 
Далі, ми опишемо, як це зазвичай відбувається. Наречені вінчаються у церкві, далі реєструють шлюб у загсі, наречений одягає обручку
на палець нареченої, і так далі. Насправді, нам не дуже цікаві деталі. Важливий сам підхід, як це описується.
Ми описуємо процес абстрактного весілля(абстрактне весілля, чудово, чи не так? ви вже відчуваєте дух програмування, який витає у таких фразах?), те, як воно взагалі відбувається, а не розповідаємо історію чийогось конкретно весілля.
Учасників процесу(весілля) ми називаємо згідно їх ролей(наречений і наречена). 
Коли ми просто описуємо цей обряд, невідомо, чи будуть це Іван і Марія, чи Петро і Ганна, нам це неважливо.

Тобто, будь-який процес має абстрактний формальний опис(як це взагалі робиться), і має конкретні випадки реального свого застосування.
Так ось, це саме те, що ми робимо із функціями! Подивіться ще раз:
```
var merry = function(bride, groom){
	return 'Congratulations, ' + groom + ' and ' + bride + ', you are married!';
}
```
Ми описали абстрактну функцію "одружитися", яка приймає два аргументи(наречену і нареченого), і щось робить(в даному випадку, просто формує привітання для них).
Поки що ніхто ні з ким не одружується насправді, ми лише описуємо процес одруження, як воно має відбуватись.
У програмуванні це називається - ми оголосили функцію.
А вже після оголошення, ми можемо її застосовувати! Тобто, женити конкретних іванів і марійок!

```
var he = 'John';
var she = 'Mary';
var happy_message = merry(she, he);
```









@@@